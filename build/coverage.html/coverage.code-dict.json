{"/home/travis/build/npmtest/node-npmtest-node-craigslist/test.js":"/* istanbul instrument in package npmtest_node_craigslist */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-craigslist/lib.npmtest_node_craigslist.js":"/* istanbul instrument in package npmtest_node_craigslist */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_craigslist = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_craigslist = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-craigslist/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-craigslist && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_craigslist */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_craigslist\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_craigslist.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_craigslist.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_craigslist.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_craigslist.__dirname + '/lib.npmtest_node_craigslist.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-craigslist/node_modules/node-craigslist/dist/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.Client = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nrequire('babel-polyfill');\n\nrequire('source-map-support/register');\n\nvar _cheerio = require('cheerio');\n\nvar _cheerio2 = _interopRequireDefault(_cheerio);\n\nvar _core = require('./core.js');\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _url = require('url');\n\nvar _url2 = _interopRequireDefault(_url);\n\nvar _web = require('./web.js');\n\nvar _web2 = _interopRequireDefault(_web);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar debug = (0, _debug2.default)('craigslist'),\n    DEFAULT_BASE_HOST = 'craigslist.org',\n    DEFAULT_CATEGORY = 'sss',\n    DEFAULT_CATEGORY_DETAILS_INDEX = 1,\n    DEFAULT_PATH = '/search/',\n    DEFAULT_QUERYSTRING = '?sort=rel',\n    DEFAULT_REQUEST_OPTIONS = {\n\thostname: '',\n\tpath: '',\n\tsecure: true\n},\n    QUERY_KEYS = ['category', 'maxAsk', 'minAsk', 'query'],\n    QUERY_PARAM_MAX = '&maxAsk=',\n    QUERY_PARAM_MIN = '&minAsk=',\n    QUERY_PARAM_QUERY = '&query=',\n    RE_HTML = /\\.htm(l)?/i,\n    RE_QUALIFIED_URL = /^\\/\\/[a-z0-9\\-]*\\.craigslist\\.[a-z]*/i,\n    RE_TAGS_MAP = /map/i;\n\n/**\n * Accepts strong of HTML and parses that string to find key details.\n *\n * @param {string} postingUrl - URL that details were loaded from\n * @param {string} markup - Markup from the request to Craigslist\n * @returns {object} details - The processed details from the Craigslist posting\n **/\nfunction _getPostingDetails(postingUrl, markup) {\n\tvar $ = _cheerio2.default.load(markup),\n\t    details = {};\n\n\tdetails.description = ($('#postingbody').text() || '').trim();\n\tdetails.mapUrl = $('div.mapbox p.mapaddress').find('a').attr('href');\n\tdetails.pid = postingUrl.substring(postingUrl.search(/[0-9]*\\.html/)).replace(/\\.html/, '');\n\tdetails.replyUrl = ($('#replylink').attr('href') || '').trim();\n\tdetails.title = ($('#titletextonly').text() || '').trim();\n\tdetails.url = postingUrl;\n\n\t// populate posting info\n\t$('div.postinginfos').find('.postinginfo').each(function (i, element) {\n\t\tvar infoType = $(element).text();\n\n\t\t// set pid (a backup to ripping it from the URL)\n\t\tif (/post\\sid/i.test(infoType)) {\n\t\t\tdetails.pid = (infoType.split(/\\:/)[1] || '').trim();\n\t\t\treturn;\n\t\t}\n\n\t\t// set postedAt\n\t\tif (/posted/i.test(infoType) && $(element).find('time').attr('datetime')) {\n\t\t\tdetails.postedAt = new Date($(element).find('time').attr('datetime'));\n\t\t\treturn;\n\t\t}\n\n\t\t// set updatedAt\n\t\tif (/updated/i.test(infoType) && $(element).find('time').attr('datetime')) {\n\t\t\tdetails.updatedAt = new Date($(element).find('time').attr('datetime'));\n\t\t\treturn;\n\t\t}\n\t});\n\n\t// populate posting photos\n\t$('#thumbs').find('a').each(function (i, element) {\n\t\tdetails.images = details.images || [];\n\t\tdetails.images.push(($(element).attr('href') || '').trim());\n\t});\n\n\treturn details;\n}\n\n/**\n * Accepts string of HTML and parses that string to find all pertinent postings.\n *\n * @param {object} options - Request options used for the request to craigslist\n * @param {string} markup - Markup from the request to Craigslist\n * @returns {Array} postings - The processed and normalized array of postings\n **/\nfunction _getPostings(options, markup) {\n\tvar $ = _cheerio2.default.load(markup),\n\t    hostname = options.hostname,\n\t    posting = {},\n\t    postings = [],\n\t    secure = options.secure;\n\n\t$('div.content').find('.result-row').each(function (i, element) {\n\t\tvar\n\t\t// introducing fix for #11 - Craigslist markup changed\n\t\tdetails = $(element).find('.result-title').attr('href').split(/\\//g).filter(function (term) {\n\t\t\treturn term.length;\n\t\t}).map(function (term) {\n\t\t\treturn term.split(RE_HTML)[0];\n\t\t}),\n\t\t    detailsUrl = $(element).find('.result-title').attr('href');\n\n\t\t// introducing fix for #6\n\t\tif (!RE_QUALIFIED_URL.test(detailsUrl)) {\n\t\t\tdetailsUrl = [secure ? 'https://' : 'http://', hostname, detailsUrl].join('');\n\t\t\t// debug('adjusted URL for posting to (%s)', detailsUrl);\n\t\t} else {\n\t\t\tdetailsUrl = [secure ? 'https:' : 'http:', detailsUrl].join('');\n\t\t\t// debug('adjusted URL for postings to (%s)', detailsUrl);\n\t\t}\n\n\t\tposting = {\n\t\t\tcategory: details[DEFAULT_CATEGORY_DETAILS_INDEX],\n\t\t\tcoordinates: {\n\t\t\t\tlat: $(element).attr('data-latitude'),\n\t\t\t\tlon: $(element).attr('data-longitude')\n\t\t\t},\n\t\t\tdate: ($(element).find('time').attr('datetime') || '').trim(),\n\t\t\thasPic: RE_TAGS_MAP.test($(element).find('.result-tags').text() || ''),\n\t\t\tlocation: ($(element).find('.result-hood').text() || '').trim(),\n\t\t\tpid: ($(element).attr('data-pid') || '').trim(),\n\t\t\tprice: ($(element).find('.result-meta .result-price').text() || '').replace(/^\\&\\#x0024\\;/g, '').trim(), // sanitize\n\t\t\ttitle: ($(element).find('.result-title').text() || '').trim(),\n\t\t\turl: detailsUrl\n\t\t};\n\n\t\t// make sure lat / lon is valid\n\t\tif (typeof posting.coordinates.lat === 'undefined' || typeof posting.coordinates.lon === 'undefined') {\n\t\t\tdelete posting.coordinates;\n\t\t}\n\n\t\tpostings.push(posting);\n\t});\n\n\treturn postings;\n}\n\n/**\n * Accepts strong of HTML and parses that string to find key details.\n *\n * @param {object} details - a posting object to populate\n * @param {string} markup - Markup from the request to Craigslist\n * @returns {null} - Returns empty\n **/\nfunction _getReplyDetails(details, markup) {\n\tvar $ = _cheerio2.default.load(markup);\n\n\t$('div.reply_options').find('b').each(function (i, element) {\n\t\tvar infoType = $(element).text().trim();\n\n\t\t// set contact name\n\t\tif (/contact\\sname/i.test(infoType)) {\n\t\t\t$(element).next().find('li').each(function (i, li) {\n\t\t\t\tdetails.contactName = $(li).text().trim();\n\t\t\t});\n\n\t\t\treturn;\n\t\t}\n\n\t\t// set phone number and email\n\t\tif (/call/i.test(infoType)) {\n\t\t\t$(element).parent().find('li').each(function (i, li) {\n\t\t\t\tvar value = $(li).text().trim();\n\n\t\t\t\t// check for phone value (based on the emoji)\n\t\t\t\tif (/\\u260E/.test(value)) {\n\t\t\t\t\tdetails.phoneNumber = value.substring(value.indexOf('('));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// check for email value (based on the @ symbol)\n\t\t\t\tif (/\\@/.test(value)) {\n\t\t\t\t\tdetails.email = value;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn;\n\t\t}\n\t});\n}\n\n/**\n * Accepts options, iterates through the known acceptable keys from defaultOptions\n * and if found in input options, uses that. If not found in input options to method,\n * falls back to the options specified when the module was initialized. If not found\n * in initialization options, uses the default options setting. All keys provided in\n * the input options variable are retained.\n *\n * @param {object} options - Input options for the web request\n * @param {string} query - A querystring\n * @returns {object} options - The coalesced result of options\n **/\nfunction _getRequestOptions(options, query) {\n\tvar requestOptions = JSON.parse(JSON.stringify(DEFAULT_REQUEST_OPTIONS)),\n\n\t/*eslint no-invalid-this:0*/\n\tself = this;\n\n\t// ensure default options are set, even if omitted from input options\n\trequestOptions.hostname = [_core2.default.Validation.coalesce(options.city, self.options.city, ''),\n\t// introducing fix for #7\n\t_core2.default.Validation.coalesce(options.baseHost, self.options.baseHost, DEFAULT_BASE_HOST)].join('.');\n\n\t// preserve any extraneous input option keys (may have addition instructions for underlying request object)\n\tObject.keys(options).forEach(function (key) {\n\t\tif (!QUERY_KEYS.indexOf(key) && _core2.default.Validation.isEmpty(requestOptions[key]) && _core2.default.Validation.isEmpty(DEFAULT_REQUEST_OPTIONS[key])) {\n\t\t\trequestOptions[key] = options[key];\n\t\t}\n\t});\n\n\t// setup path\n\tif (_core2.default.Validation.isEmpty(requestOptions.path)) {\n\t\trequestOptions.path = DEFAULT_PATH;\n\t}\n\n\t// setup category\n\trequestOptions.path = [requestOptions.path, _core2.default.Validation.coalesce(options.category, DEFAULT_CATEGORY)].join('');\n\n\t// setup querystring\n\trequestOptions.path = [requestOptions.path, DEFAULT_QUERYSTRING].join('');\n\n\t// add search query (if specified)\n\tif (!_core2.default.Validation.isEmpty(query)) {\n\t\trequestOptions.path = [requestOptions.path, QUERY_PARAM_QUERY, encodeURIComponent(query)].join('');\n\t}\n\n\t// add min asking price (if specified)\n\tif (!_core2.default.Validation.isEmpty(options.minAsk)) {\n\t\trequestOptions.path = [requestOptions.path, QUERY_PARAM_MIN, options.minAsk].join('');\n\t}\n\n\t// add max asking price (if specified)\n\tif (!_core2.default.Validation.isEmpty(options.maxAsk)) {\n\t\trequestOptions.path = [requestOptions.path, QUERY_PARAM_MAX, options.maxAsk].join('');\n\t}\n\n\tdebug('setting request options: %o', requestOptions);\n\n\treturn requestOptions;\n}\n\nvar Client = exports.Client = function () {\n\tfunction Client(options) {\n\t\t_classCallCheck(this, Client);\n\n\t\tthis.options = options || {};\n\t\tthis.request = new _web2.default.Request(this.options);\n\t}\n\n\t_createClass(Client, [{\n\t\tkey: 'details',\n\t\tvalue: function details(posting, callback) {\n\t\t\tvar exec = void 0,\n\t\t\t    getDetails = void 0,\n\t\t\t    postingUrl = void 0,\n\t\t\t    requestOptions = void 0,\n\t\t\t    self = this;\n\n\t\t\t// retrieves the posting details directly\n\t\t\tgetDetails = new Promise(function (resolve, reject) {\n\t\t\t\tif (_core2.default.Validation.isEmpty(posting)) {\n\t\t\t\t\treturn reject(new Error('posting URL is required'));\n\t\t\t\t}\n\n\t\t\t\tif (typeof posting !== 'string' && _core2.default.Validation.isEmpty(posting.url)) {\n\t\t\t\t\treturn reject(new Error('posting URL is required'));\n\t\t\t\t}\n\n\t\t\t\tpostingUrl = typeof posting === 'string' ? posting : posting.url;\n\t\t\t\trequestOptions = _url2.default.parse(postingUrl);\n\t\t\t\trequestOptions.secure = /https/i.test(requestOptions.protocol);\n\n\t\t\t\tdebug('request options set to: %o', requestOptions);\n\n\t\t\t\treturn self.request.get(requestOptions).then(function (markup) {\n\t\t\t\t\tdebug('retrieved posting %o', posting);\n\t\t\t\t\tvar details = _getPostingDetails.call(self, postingUrl, markup);\n\n\t\t\t\t\treturn resolve(details);\n\t\t\t\t}).catch(reject);\n\t\t\t});\n\n\t\t\texec = new Promise(function (resolve, reject) {\n\t\t\t\treturn getDetails.then(function (details) {\n\t\t\t\t\tif (!details.replyUrl) {\n\t\t\t\t\t\treturn resolve(details);\n\t\t\t\t\t}\n\n\t\t\t\t\t// properly adjust reply URL\n\t\t\t\t\tif (!RE_QUALIFIED_URL.test(details.replyUrl)) {\n\t\t\t\t\t\tdetails.replyUrl = ['http://', requestOptions.hostname, details.replyUrl].join('');\n\t\t\t\t\t}\n\n\t\t\t\t\t// set request options to retrieve posting contact info\n\t\t\t\t\trequestOptions = _url2.default.parse(details.replyUrl);\n\n\t\t\t\t\treturn self.request.get(requestOptions).then(function (markup) {\n\t\t\t\t\t\t_getReplyDetails.call(self, details, markup);\n\n\t\t\t\t\t\treturn resolve(details);\n\t\t\t\t\t}).catch(reject);\n\t\t\t\t}).catch(reject);\n\t\t\t});\n\n\t\t\t// execute!\n\t\t\treturn _core2.default.Validation.promiseOrCallback(exec, callback);\n\t\t}\n\t}, {\n\t\tkey: 'list',\n\t\tvalue: function list(options, callback) {\n\t\t\t/*eslint no-undefined:0*/\n\t\t\treturn this.search(options, undefined, callback);\n\t\t}\n\t}, {\n\t\tkey: 'search',\n\t\tvalue: function search(options, query, callback) {\n\t\t\tvar _this = this;\n\n\t\t\tif (typeof query === 'function' && _core2.default.Validation.isEmpty(callback)) {\n\t\t\t\tcallback = query;\n\t\t\t\tquery = typeof options === 'string' ? options : query;\n\t\t\t\toptions = typeof options === 'string' ? {} : options;\n\t\t\t}\n\n\t\t\tif (_core2.default.Validation.isEmpty(query) && typeof options === 'string') {\n\t\t\t\tquery = options;\n\t\t\t\toptions = {};\n\t\t\t}\n\n\t\t\tif (typeof options === 'function') {\n\t\t\t\tcallback = options;\n\t\t\t\toptions = {};\n\t\t\t\t/*eslint no-undefined:0*/\n\t\t\t\tquery = undefined;\n\t\t\t}\n\n\t\t\t// ensure options is at least a blank object before continuing\n\t\t\toptions = options || {};\n\n\t\t\tvar exec = void 0,\n\t\t\t    self = this;\n\n\t\t\t// create a Promise to execute the request\n\t\t\texec = new Promise(function (resolve, reject) {\n\t\t\t\t// remap options for the request\n\t\t\t\tvar requestOptions = _getRequestOptions.call(_this, options, query);\n\n\t\t\t\tdebug('request options set to: %o', requestOptions);\n\n\t\t\t\tif (_core2.default.Validation.isEmpty(requestOptions.hostname)) {\n\t\t\t\t\treturn reject(new Error('unable to set hostname (check to see if city is specified)'));\n\t\t\t\t}\n\n\t\t\t\treturn self.request.get(requestOptions).then(function (markup) {\n\t\t\t\t\tvar postings = _getPostings(requestOptions, markup);\n\t\t\t\t\tdebug('found %d postings', postings.length);\n\n\t\t\t\t\treturn resolve(postings);\n\t\t\t\t}).catch(reject);\n\t\t\t});\n\n\t\t\t// execute!\n\t\t\treturn _core2.default.Validation.promiseOrCallback(exec, callback);\n\t\t}\n\t}]);\n\n\treturn Client;\n}();\n\nexports.default = { Client: Client };\n//# sourceMappingURL=index.js.map\n","/home/travis/build/npmtest/node-npmtest-node-craigslist/node_modules/node-craigslist/dist/core.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.Validation = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nrequire('babel-polyfill');\n\nrequire('source-map-support/register');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Validation = exports.Validation = function () {\n\tfunction Validation() {\n\t\t_classCallCheck(this, Validation);\n\t}\n\n\t_createClass(Validation, null, [{\n\t\tkey: 'coalesce',\n\t\tvalue: function coalesce() {\n\t\t\treturn Array.prototype.slice.call(arguments).filter(function (value) {\n\t\t\t\treturn !Validation.isEmpty(value);\n\t\t\t})[0];\n\t\t}\n\t}, {\n\t\tkey: 'isEmpty',\n\t\tvalue: function isEmpty(value) {\n\t\t\treturn value === null || [typeof value === 'undefined', typeof value === 'string' && !value.length, typeof value === 'number' && isNaN(value), Array.isArray(value) && !value.length, (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value.toString && /^\\[object\\sObject\\]$/.test(value.toString()) && !Object.keys(value).length].some(function (result) {\n\t\t\t\treturn result;\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'promiseOrCallback',\n\t\tvalue: function promiseOrCallback(promise, callback) {\n\t\t\tif (Validation.isEmpty(callback)) {\n\t\t\t\treturn promise;\n\t\t\t}\n\n\t\t\treturn promise.then(function (result) {\n\t\t\t\treturn callback(null, result);\n\t\t\t}).catch(callback);\n\t\t}\n\t}]);\n\n\treturn Validation;\n}();\n\nexports.default = { Validation: Validation };\n//# sourceMappingURL=core.js.map\n","/home/travis/build/npmtest/node-npmtest-node-craigslist/node_modules/node-craigslist/dist/web.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.Request = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nrequire('babel-polyfill');\n\nrequire('source-map-support/register');\n\nvar _core = require('./core.js');\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _events = require('events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _http = require('http');\n\nvar _http2 = _interopRequireDefault(_http);\n\nvar _https = require('https');\n\nvar _https2 = _interopRequireDefault(_https);\n\nvar _url = require('url');\n\nvar _url2 = _interopRequireDefault(_url);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar debug = (0, _debug2.default)('craigslist'),\n    DEFAULT_MAX_REDIRECT_COUNT = 5,\n    DEFAULT_RETRY_COUNT = 3,\n    DEFAULT_TIMEOUT = 30000,\n    EVENT_REDIRECT = 'redirect',\n    EVENT_REQUEST = 'request',\n    EVENT_RESPONSE = 'response',\n    FIRST_TRY = 1,\n    HTTP_ERROR_CODE_THRESHHOLD = 400,\n    HTTP_ERROR_CODE_RETRY_THRESHHOLD = 500,\n\n// reference: https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#3xx_Redirection\nHTTP_PROXY_REQUIRED = 305,\n    HTTP_REDIRECT_CODE_PERM = 301,\n    HTTP_REDIRECT_CODE_TEMP = 302,\n    HTTP_REDIRECT_NEW_CODE_PERM = 308,\n    HTTP_REDIRECT_NEW_CODE_TEMP = 307,\n    REQUEST_OPTIONS = ['agent', 'auth', 'family', 'headers', 'host', 'hostname', 'json', 'localAddress', 'maxRetries', 'method', 'path', 'pathname', 'port', 'protocol', 'query', 'rejectUnauthorized', 'maxRetries', 'rawStream', 'secure', 'socketPath', 'timeout'],\n    SECURE_PROTOCOL_RE = /^https/i,\n    TOP_LEVEL_REDIRECT_RE = /^\\/{2}([a-z0-9\\-\\_\\.]*)([\\/a-z\\-\\_\\.]*)/i;\n\nfunction _augmentRequestOptions(options) {\n\tvar augmented = {},\n\n\t/*eslint no-invalid-this:0*/\n\tself = this;\n\n\t// ensure options exist\n\toptions = options || {};\n\n\t// apply settings from Ctor\n\tREQUEST_OPTIONS.forEach(function (field) {\n\t\tvar value = _core2.default.Validation.coalesce(options[field], self.settings[field]);\n\n\t\tif (!_core2.default.Validation.isEmpty(value)) {\n\t\t\tdebug('request %s will be set to %s (options = %s, settings = %s)', field, value, options[field], self.settings[field]);\n\t\t\taugmented[field] = value;\n\t\t}\n\t});\n\n\t// ensure maxRetries is applied if one is not supplied\n\taugmented.maxRetries = _core2.default.Validation.coalesce(augmented.maxRetries, DEFAULT_RETRY_COUNT);\n\n\t// ensure rawStream setting is applied if not supplied\n\taugmented.rawStream = _core2.default.Validation.isEmpty(augmented.rawStream) ? false : augmented.rawStream;\n\n\t// ensure default timeout is applied if one is not supplied\n\taugmented.timeout = _core2.default.Validation.coalesce(augmented.timeout, DEFAULT_TIMEOUT);\n\n\t// create `path` from pathname and query.\n\taugmented.path = _core2.default.Validation.coalesce(augmented.path, augmented.pathname);\n\n\treturn augmented;\n}\n\nfunction _exec(options, data, tryCount, callback) {\n\tif (typeof data === 'function' && _core2.default.Validation.isEmpty(callback)) {\n\t\tcallback = data;\n\t\t/*eslint no-undefined:0*/\n\t\tdata = undefined;\n\t\ttryCount = FIRST_TRY;\n\t}\n\n\tif (typeof tryCount === 'function' && _core2.default.Validation.isEmpty(callback)) {\n\t\tcallback = tryCount;\n\t\ttryCount = FIRST_TRY;\n\t}\n\n\tdata = data || '';\n\toptions.headers = options.headers || {};\n\ttryCount = tryCount || FIRST_TRY;\n\n\tvar exec = void 0,\n\t    redirectCount = 0,\n\n\t/*eslint no-invalid-this:0*/\n\tself = this;\n\n\texec = new Promise(function (resolve, reject) {\n\t\tif (typeof data !== 'string') {\n\t\t\tdata = JSON.stringify(data);\n\t\t}\n\n\t\t// apply content length header\n\t\toptions.headers['Content-Length'] = Buffer.byteLength(data);\n\n\t\t// apply application/json header if appropriate\n\t\tif (!options.rawStream && options.json && !options.headers['Content-Type']) {\n\t\t\toptions.headers['Content-Type'] = 'application/json';\n\t\t}\n\n\t\t// provide request event\n\t\tif (self.emit) {\n\t\t\tself.emit(EVENT_REQUEST, options);\n\t\t}\n\n\t\tvar makeRequest = function makeRequest() {\n\t\t\tdebug('establishing request with options: %o', options);\n\t\t\tvar req = (options.secure ? _https2.default : _http2.default).request(options, function (res) {\n\t\t\t\tvar chunks = [],\n\t\t\t\t    context = {\n\t\t\t\t\theaders: res.headers,\n\t\t\t\t\tstatusCode: res.statusCode\n\t\t\t\t},\n\t\t\t\t    redirect = [HTTP_REDIRECT_CODE_PERM, HTTP_REDIRECT_CODE_TEMP, HTTP_REDIRECT_NEW_CODE_PERM, HTTP_REDIRECT_NEW_CODE_TEMP].some(function (code) {\n\t\t\t\t\treturn code === context.statusCode;\n\t\t\t\t});\n\n\t\t\t\t// provide response event (as there are response headers)\n\t\t\t\tif (self.emit) {\n\t\t\t\t\tself.emit(EVENT_RESPONSE, context);\n\t\t\t\t}\n\n\t\t\t\tif (context.statusCode === HTTP_PROXY_REQUIRED) {\n\t\t\t\t\tvar err = new Error('proxy server configuration required');\n\t\t\t\t\terr.options = options;\n\t\t\t\t\terr.response = context;\n\n\t\t\t\t\tdebug('error: proxy server required: %o', err);\n\n\t\t\t\t\treturn reject(err);\n\t\t\t\t}\n\n\t\t\t\t// check for HTTP redirect\n\t\t\t\tif (redirect) {\n\t\t\t\t\tif (_core2.default.Validation.isEmpty(context.headers.location)) {\n\t\t\t\t\t\tvar _err = new Error('redirect requested with no location');\n\t\t\t\t\t\t_err.options = options;\n\t\t\t\t\t\t_err.response = context;\n\n\t\t\t\t\t\tdebug('error: missing redirect header: %o', _err);\n\n\t\t\t\t\t\treturn reject(_err);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (redirectCount >= DEFAULT_MAX_REDIRECT_COUNT) {\n\t\t\t\t\t\tvar _err2 = new Error('maximum redirect limit exceeded');\n\t\t\t\t\t\t_err2.options = options;\n\t\t\t\t\t\t_err2.response = context;\n\n\t\t\t\t\t\tdebug('error: exceeded max number of redirects: %o', _err2);\n\n\t\t\t\t\t\treturn reject(_err2);\n\t\t\t\t\t}\n\n\t\t\t\t\t// remap options and redirect to supplied URL\n\t\t\t\t\tvar redirectUrl = _url2.default.parse(context.headers.location);\n\n\t\t\t\t\tif (TOP_LEVEL_REDIRECT_RE.test(redirectUrl.pathname)) {\n\t\t\t\t\t\tdebug('top level domain detected in location: %o', redirectUrl);\n\t\t\t\t\t\tvar pathParts = redirectUrl.pathname.match(TOP_LEVEL_REDIRECT_RE);\n\n\t\t\t\t\t\t// ensure the hostname is corrected\n\t\t\t\t\t\tredirectUrl.host = pathParts[1];\n\t\t\t\t\t\tredirectUrl.hostname = pathParts[1];\n\n\t\t\t\t\t\t// update the path and pathname appropriately\n\t\t\t\t\t\tredirectUrl.path = [pathParts[2], redirectUrl.search].join('');\n\t\t\t\t\t\tredirectUrl.pathname = pathParts[2];\n\t\t\t\t\t}\n\n\t\t\t\t\toptions = {\n\t\t\t\t\t\thost: redirectUrl.host || options.host || options.hostname,\n\t\t\t\t\t\tmethod: options.method,\n\t\t\t\t\t\tpath: redirectUrl.path,\n\t\t\t\t\t\tpathname: redirectUrl.pathname,\n\t\t\t\t\t\trawStream: options.rawStream,\n\t\t\t\t\t\tsecure: redirectUrl.protocol ? SECURE_PROTOCOL_RE.test(redirectUrl.protocol) : options.secure\n\t\t\t\t\t};\n\n\t\t\t\t\t// increment number of redirects (to avoid endless looping)\n\t\t\t\t\tredirectCount++;\n\n\t\t\t\t\t// emit redirect event\n\t\t\t\t\tif (self.emit) {\n\t\t\t\t\t\tself.emit(EVENT_REDIRECT, options);\n\t\t\t\t\t}\n\n\t\t\t\t\t// re-request based on the redirect location\n\t\t\t\t\treturn setImmediate(makeRequest);\n\t\t\t\t}\n\n\t\t\t\t// for content-api requests (or other raw binary data requests)\n\t\t\t\t// rawStream may be set to true - in the event of this, return\n\t\t\t\t// the response directly\n\t\t\t\tif (options.rawStream) {\n\t\t\t\t\tif (context.statusCode >= HTTP_ERROR_CODE_THRESHHOLD) {\n\t\t\t\t\t\tvar _err3 = new Error('resource not found');\n\t\t\t\t\t\t_err3.context = context;\n\n\t\t\t\t\t\tdebug('error: unable to process response: %o', context.statusCode);\n\n\t\t\t\t\t\treturn reject(_err3);\n\t\t\t\t\t}\n\n\t\t\t\t\tdebug('returning response as stream');\n\n\t\t\t\t\treturn resolve(res);\n\t\t\t\t}\n\n\t\t\t\t// standard API requests flow through below...\n\t\t\t\tres.setEncoding('utf-8');\n\n\t\t\t\tres.on('data', function (chunk) {\n\t\t\t\t\treturn chunks.push(chunk);\n\t\t\t\t});\n\n\t\t\t\tres.once('end', function () {\n\t\t\t\t\tvar body = chunks.join(''),\n\t\t\t\t\t    retry = context.statusCode >= HTTP_ERROR_CODE_RETRY_THRESHHOLD && tryCount <= options.maxRetries;\n\n\t\t\t\t\t// attempt to parse the body\n\t\t\t\t\tif (typeof body === 'string' && body.length && options.json) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tbody = JSON.parse(body);\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\terr.body = body;\n\t\t\t\t\t\t\terr.context = context;\n\n\t\t\t\t\t\t\tdebug('error: unable to parse JSON response: %o', err);\n\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// handle retry if error code is above threshhold\n\t\t\t\t\tif (retry) {\n\t\t\t\t\t\tdebug('retry: response status code: %o', context.statusCode);\n\t\t\t\t\t\ttryCount += 1;\n\t\t\t\t\t\treturn makeRequest();\n\t\t\t\t\t}\n\n\t\t\t\t\t// handle other response errors\n\t\t\t\t\tif (context.statusCode >= HTTP_ERROR_CODE_THRESHHOLD) {\n\t\t\t\t\t\tvar _err4 = new Error('resource not found');\n\t\t\t\t\t\t_err4.body = body;\n\t\t\t\t\t\t_err4.context = context;\n\n\t\t\t\t\t\tdebug('error: resource not found: %o', _err4);\n\n\t\t\t\t\t\treturn reject(_err4);\n\t\t\t\t\t}\n\n\t\t\t\t\tdebug('successfully completed request');\n\n\t\t\t\t\t// resolve the request as complete\n\t\t\t\t\treturn resolve(body || '');\n\t\t\t\t});\n\t\t\t});\n\n\t\t\treq.on('error', function (err) {\n\t\t\t\tdebug('error: unable to establish connection: %o', err);\n\n\t\t\t\t// retry if below retry count threshhold\n\t\t\t\tif (tryCount <= options.maxRetries) {\n\t\t\t\t\tdebug('retry: %d retries remaining', options.maxRetries - tryCount);\n\t\t\t\t\ttryCount += 1;\n\t\t\t\t\treturn makeRequest();\n\t\t\t\t}\n\n\t\t\t\treturn reject(err);\n\t\t\t});\n\n\t\t\t// timeout the connection\n\t\t\tif (options.timeout) {\n\t\t\t\tdebug('setting timeout value to %o', options.timeout);\n\t\t\t\treq.setTimeout(options.timeout, req.abort);\n\t\t\t}\n\n\t\t\t// write data to the connection\n\t\t\tif (data) {\n\t\t\t\tdebug('writing %d bytes of data', options.headers['Content-Length']);\n\t\t\t\treq.write(data);\n\t\t\t}\n\n\t\t\t// signal end of request data\n\t\t\treq.end();\n\t\t};\n\n\t\t// do it!\n\t\tmakeRequest();\n\t});\n\n\treturn _core2.default.Validation.promiseOrCallback(exec, callback);\n}\n\nvar Request = exports.Request = function (_events$EventEmitter) {\n\t_inherits(Request, _events$EventEmitter);\n\n\tfunction Request(settings) {\n\t\t_classCallCheck(this, Request);\n\n\t\tvar _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Request).call(this));\n\n\t\t_this.settings = settings || {};\n\t\treturn _this;\n\t}\n\n\t/*\n delete (options, callback) {\n \tdebug('performing DELETE (%o)', options);\n \toptions = this::_augmentRequestOptions(options);\n \toptions.method = 'DELETE';\n \t\treturn this::_exec(options, callback);\n }\n //*/\n\n\t_createClass(Request, [{\n\t\tkey: 'get',\n\t\tvalue: function get(options, callback) {\n\t\t\tdebug('performing GET (%o)', options);\n\t\t\toptions = _augmentRequestOptions.call(this, options);\n\t\t\toptions.method = 'GET';\n\n\t\t\treturn _exec.call(this, options, callback);\n\t\t}\n\t}, {\n\t\tkey: 'getRequestOptions',\n\t\tvalue: function getRequestOptions(options) {\n\t\t\treturn _augmentRequestOptions.call(this, options);\n\t\t}\n\n\t\t/*\n  head (options, callback) {\n  \tdebug('performing HEAD (%o)', options);\n  \toptions = this::_augmentRequestOptions(options);\n  \toptions.method = 'HEAD';\n  \t\treturn this::_exec(options, callback);\n  }\n  //*/\n\n\t\t/*\n  post (options, data, callback) {\n  \tdebug('performing POST (%o)', options);\n  \toptions = this::_augmentRequestOptions(options);\n  \toptions.method = 'POST';\n  \t\treturn this::_exec(options, data, callback);\n  }\n  //*/\n\n\t\t/*\n  put (options, data, callback) {\n  \tdebug('performing PUT (%o)', options);\n  \toptions = this::_augmentRequestOptions(options);\n  \toptions.method = 'PUT';\n  \t\treturn this::_exec(options, data, callback);\n  }\n  //*/\n\n\t}]);\n\n\treturn Request;\n}(_events2.default.EventEmitter);\n\nexports.default = { Request: Request };\n//# sourceMappingURL=web.js.map\n","/home/travis/build/npmtest/node-npmtest-node-craigslist/node_modules/node-craigslist/gulpfile.js":"'use strict';\n\nvar\n\tbabel = require('gulp-babel'),\n\tcoveralls = require('gulp-coveralls'),\n\tdel = require('del'),\n\teslint = require('gulp-eslint'),\n\tgulp = require('gulp'),\n\tgulpUtil = require('gulp-util'),\n\tistanbul = require('gulp-istanbul'),\n\tmocha = require('gulp-mocha'),\n\tsourcemaps = require('gulp-sourcemaps');\n\n\ngulp.task('build', ['clean'], () => {\n\t\treturn gulp\n\t\t\t.src('src/**/*.js')\n\t\t\t.pipe(sourcemaps.init())\n\t\t\t.pipe(babel({\n\t\t\t\tpresets : ['es2015', 'stage-0']\n\t\t\t}))\n\t\t\t.pipe(sourcemaps.write('.'))\n\t\t\t.pipe(gulp.dest('dist'));\n\t});\n\n\ngulp.task('clean', function (callback) {\n\treturn del(['dist', 'reports'], callback);\n});\n\n\ngulp.task('coveralls', ['test-coverage'], function () {\n\treturn gulp\n\t\t.src('reports/lcov.info')\n\t\t.pipe(coveralls());\n});\n\n\ngulp.task('lint', function () {\n\treturn gulp\n\t\t.src(['**/*.js', '!dist/**', '!node_modules/**', '!reports/**'])\n\t\t.pipe(eslint())\n\t\t.pipe(eslint.format())\n\t\t.pipe(eslint.failAfterError());\n});\n\n\ngulp.task('test-coverage', ['build'], function () {\n\treturn gulp\n\t\t.src(['./dist/**/*.js'])\n\t\t.pipe(istanbul())\n\t\t.pipe(istanbul.hookRequire())\n\t\t.on('finish', function () {\n\t\t\tgulp\n\t\t\t\t.src(['./test/lib/**/*.js'])\n\t\t\t\t.pipe(mocha({ reporter : 'spec' })\n\t\t\t\t\t\t.on('error', function (err) {\n\t\t\t\t\t\t\tif (err.showStack) {\n\t\t\t\t\t\t\t\tgulpUtil.log(err);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t/*eslint no-invalid-this:0*/\n\t\t\t\t\t\t\tthis.emit('end');\n\t\t\t\t\t\t}))\n\t\t\t\t.pipe(istanbul.writeReports('./reports'));\n\t\t});\n});\n\n\ngulp.task('test-integration', ['build'], function () {\n\treturn gulp\n\t\t.src(['./test/integration/**/*.js'], { read : false })\n\t\t.pipe(mocha({\n\t\t\tcheckLeaks : false,\n\t\t\treporter : 'spec',\n\t\t\tui : 'bdd'\n\t\t}));\n});\n\n\ngulp.task('test-unit', ['build'], function () {\n\treturn gulp\n\t\t.src(['./test/lib/**/*.js'], { read : false })\n\t\t.pipe(mocha({\n\t\t\tcheckLeaks : true,\n\t\t\treporter : 'spec',\n\t\t\tui : 'bdd'\n\t\t}));\n});\n"}